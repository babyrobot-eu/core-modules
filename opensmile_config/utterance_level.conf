//initiliase memory

[componentInstances:cComponentManager]
instance[dataMemory].type = cDataMemory

instance[waveIn].type       = cWaveSource
instance[fr].type 	    = cFramer
instance[pe].type 	    = cVectorPreemphasis
instance[win].type 	    = cWindower

instance[fft].type      = cTransformFFT
instance[fftmp].type    = cFFTmagphase
instance[acf].type      = cAcf
instance[cep].type      = cAcf
instance[pitch].type   	= cPitchACF

instance[melspec].type  = cMelspec 
instance[mfcc].type     = cMfcc
instance[zcr].type      = cMZcr
instance[energy].type   = cEnergy

instance[llds_smoothing].type = cContourSmoother
instance[llds_delta].type     = cDeltaRegression
instance[functionals].type    = cFunctionals

// Output Sinks
instance[arffsink].type=cArffSink
instance[csvsink].type=cCsvSink

[waveIn:cWaveSource]
writer.dmLevel = wave
 ; this defines a new commandline option "-I" or "-inputfile", which can be used to specify 
 ; the filename on the commandline instead of having it "hard-coded" in the config file
filename = \cm[inputfile(I){test.wav}:name of input file]
 ; mix stereo files down to mono for analysis
monoMixdown=1

//========================================Window Frame=====================================
[fr:cFramer]
reader.dmLevel = wave
writer.dmLevel = frames

frameSize = 0.030
frameStep = 0.015
frameMode = fixed
frameCenterSpecial = center

//==================================Preemphasis Filter=====================================
[pe:cVectorPreemphasis]
reader.dmLevel = frames
writer.dmLevel = framespe
k = 0.9375
de = 0


//==============================Hamming Window in eachFrame================================
[win:cWindower]
reader.dmLevel	= framespe
writer.dmLevel	= winframes
copyInputName   = 1
processArrayFields = 1
winFunc = ham
gain    = 1.0
offset   = 0


//===============Compute FFT in Each Frame & Autocorrelation Function & Cepstrum===========
[fft:cTransformFFT]
reader.dmLevel = winframes
writer.dmLevel = fftc

;for compatibility with 2.2.0 and older versions
zeroPadSymmetric = 0

[fftmp:cFFTmagphase]
reader.dmLevel = fftc
writer.dmLevel = fftmag

[acf:cAcf]
reader.dmLevel = fftmag
writer.dmLevel = acf

[cep:cAcf]
reader.dmLevel = fftmag
writer.dmLevel = cepstrum
cepstrum = 1

//==============================Compute Pitch (emobase 2010)===============================
[pitch:cPitchACF]
reader.dmLevel = acf;cepstrum
writer.dmLevel = pitch
buffersize     = 100
writer.levelconf.growDyn = 1
writer.levelconf.isRb    = 0

copyInputName = 1
processArrayFields = 0

maxPitch  = 500
voiceProb = 1
voiceQual = 0
HNR   	  = 0
F0        = 1
F0raw     = 0
F0env     = 0
//voicingCutoff = 0.400000
voicingCutoff = 0.550000


//================================Compute Zero Crossing Rate===============================
[zcr:cMZcr]
reader.dmLevel = winframes
writer.dmLevel = mzcr

buffersize = 100
writer.levelconf.growDyn = 1
writer.levelconf.isRb   = 0
copyInputName      = 1
processArrayFields = 1
zcr    = 1
amax   = 0
mcr    = 0
maxmin = 0
dc     = 0

//====================================Computate Energy=====================================
[energy:cEnergy]
reader.dmLevel = winframes
writer.dmLevel = frameenergy

buffersize = 100
writer.levelconf.growDyn = 1
writer.levelconf.isRb    = 0
rms = 1
log = 0


//=============================Compute 12 - First MFCCs====================================
[melspec:cMelspec]
reader.dmLevel = fftmag
writer.dmLevel = melspec
copyInputName  = 1
processArrayFields = 1
; htk compatible sample value scaling
htkcompatible = 1
nBands = 26
; use power spectrum instead of magnitude spectrum
usePower = 1
lofreq = 0
hifreq = 8000
specScale = mel
inverse = 0

[mfcc:cMfcc]
reader.dmLevel = melspec
writer.dmLevel = mfcc
buffersize = 100

writer.levelconf.growDyn = 1
writer.levelconf.isRb    = 0
copyInputName      = 1
processArrayFields = 1

firstMfcc     = 1
lastMfcc      = 12
cepLifter     = 22.0
htkcompatible = 1


//==========================Smooth LLDs & Compute Delta Regression=========================
[llds_smoothing:cContourSmoother]
;reader.dmLevel = frameenergy; mzcr ; pitch ; intensity; mfcc
reader.dmLevel  = mfcc ; mzcr ; frameenergy ; pitch
writer.dmLevel  = lld
buffersize	    = 100

writer.levelconf.isRb    = 0
writer.levelconf.growDyn = 1
smaWin = 3
; this level must grow to hold ALL the LLD of the full input

[llds_delta:cDeltaRegression]
reader.dmLevel = lld
writer.dmLevel = lld_de
buffersize     = 100

writer.levelconf.isRb    = 0
writer.levelconf.growDyn = 1
deltawin  = 2
blocksize = 1


//======================================Functionals========================================
[functionals:cFunctionals]
reader.dmLevel = mfcc ; mzcr ; frameenergy ; pitch; lld ; lld_de 
writer.dmLevel = functionals

copyInputName      = 1
frameMode          = full
frameSize          = 0
frameStep          = 0
frameCenterSpecial = left

functionalsEnabled = Extremes ; Moments 

Extremes.range 		  = 0
Extremes.max          = 0
Extremes.min 		  = 0
Extremes.maxpos 	  = 1
Extremes.minpos 	  = 1
Extremes.maxameandist = 0
Extremes.minameandist = 0
Extremes.norm 		  = frame

Moments.variance 	  = 0
Moments.stddev 		  = 1
Moments.skewness 	  = 1
Moments.kurtosis 	  = 1
Moments.amean 		  = 0

//======================================Output=============================================
[arffsink:cArffSink]
reader.dmLevel=functionals
frameTime=0
frameIndex=0
filename=\cm[arffoutput(0){/tmp/features.arff}:name of WEKA Arff output file, set to a valid filename to enable this output sink]
 ; name of @relation in the ARFF file
relation=\cm[corpus{SMILEfeaturesLive}:corpus name, arff relation]
class[0].name = class
class[0].type = {1,2}
target[0].all = \cm[classlabel{?}:instance class label]
append=0

[csvsink:cCsvSink]
reader.dmLevel = functionals
filename=\cm[csvoutput(0){/tmp/features.csv}:output csv file for LLD, disabled by default ?, only written if filename given]
delimChar = ,
append = 0
frameTime=0
frameIndex=0
printHeader = 1



//////---------------------- END -------------------------///////
